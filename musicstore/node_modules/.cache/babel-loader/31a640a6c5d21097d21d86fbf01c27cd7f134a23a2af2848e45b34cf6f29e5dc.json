{"ast":null,"code":"import axios from \"axios\";\nimport store from \"@/store\";\nimport getRefresh from \"@/api/refreshToken\";\nconst service = axios.create({\n  baseURL: process.env.BASE_API,\n  // 请求前置连接\n  timeout: 10 * 1000 // 超时时间\n  // withCredentials: false, // 跨域问题时设置\n});\n\nservice.interceptors.request.use(config => {\n  if (store.state.user && store.state.user.authorization) {\n    config.headers.Authorization = \" Bearer \" + store.state.user.authorization;\n  }\n  return config;\n}, error => {\n  // 弹窗提示\n  console.log(error);\n  return Promise.reject(error);\n});\nservice.interceptors.response.use(response => {\n  /**\r\n   * 1、鉴权：401，403: \r\n   *      1、退出登录 \r\n   *      2、重新鉴权：\r\n   *          1、失败退出登录\r\n   *          2、成功再次发起请求\r\n   * 2、错误信息弹窗提示，并返回错误信息\r\n   * 2xx\r\n   * \r\n   * {\r\n      code: 200,\r\n      data: {},\r\n      message: 'success'\r\n     }\r\n   */\n\n  console.log('-----');\n  console.log(response);\n  const res = response.data;\n  if (response.status > 199 && response.status < 300) {\n    return res;\n  }\n\n  // if ([401, 403].includes(response.status)) {\n  // if (response.status == 401){\n  // console.log(\"token失效了\");\n  // const refreshToken = window.localStorage.refreshToken\n  // getRefresh(refreshToken).then(res=>{\n  //     const {token, refreshToken} = res.data.data\n  //     console.log(res.data.data);\n  //     window.localStorage.setItem('token', token)\n  //     window.localStorage.setItem('refreshToken', refreshToken)\n  // })\n  //     // 退出登录\n  // }\n\n  // 弹窗提示\n  console.log(res.code);\n  return Promise.reject(new Error(res.message));\n}, error => {\n  console.log(error);\n  if (error.response && error.response.status == 401) {\n    console.log(\"token失效了\");\n    const refreshToken = window.localStorage.refreshToken;\n    // 用refresh_token 刷新token\n    getRefresh(refreshToken).then(res => {\n      const {\n        access_token,\n        refresh_token\n      } = res.data;\n      store.state.user.authorization = access_token;\n      console.log(res);\n      window.localStorage.setItem('authorization', access_token);\n      window.localStorage.setItem('refreshToken', refresh_token);\n      const config = error.config;\n      // 重置一下配置\n      config.headers.Authorization = \" Bearer \" + store.state.user.authorization;\n      config.baseURL = ''; // url已经带上了/api，避免出现/api/api的情况\n      // 重试当前请求并返回promise\n      return Promise.reject(service(config).then(res => {\n        console.log(res.data);\n      }));\n    }).catch(res => {\n      console.error('refreshtoken error =>', res);\n      debugger;\n\n      //刷新token失败，，跳转到首页重新登录\n      window.location.href = '/';\n      localStorage.removeItem('login');\n      //提醒用户过期\n      this.$message({\n        showClose: true,\n        message: '你已长时间没有登陆，请重新登陆',\n        type: 'warning'\n      });\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","store","getRefresh","service","create","baseURL","process","env","BASE_API","timeout","interceptors","request","use","config","state","user","authorization","headers","Authorization","error","console","log","Promise","reject","response","res","data","status","code","Error","message","refreshToken","window","localStorage","then","access_token","refresh_token","setItem","catch","location","href","removeItem","$message","showClose","type"],"sources":["D:/WYKS2python/musicstore/src/utils/requests.js"],"sourcesContent":["import axios from \"axios\";\r\nimport store from \"@/store\";\r\nimport getRefresh from \"@/api/refreshToken\";\r\n\r\nconst service = axios.create({\r\n    baseURL: process.env.BASE_API,    // 请求前置连接\r\n    timeout: 10 * 1000, // 超时时间\r\n    // withCredentials: false, // 跨域问题时设置\r\n})\r\n\r\nservice.interceptors.request.use(\r\n    (config) => {\r\n        if (store.state.user && store.state.user.authorization) {\r\n            config.headers.Authorization = \" Bearer \"+store.state.user.authorization\r\n        }\r\n        return config\r\n    },\r\n    (error) => {\r\n        // 弹窗提示\r\n        console.log(error);\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nservice.interceptors.response.use(\r\n    (response) => {\r\n        /**\r\n         * 1、鉴权：401，403: \r\n         *      1、退出登录 \r\n         *      2、重新鉴权：\r\n         *          1、失败退出登录\r\n         *          2、成功再次发起请求\r\n         * 2、错误信息弹窗提示，并返回错误信息\r\n         * 2xx\r\n         * \r\n         * {\r\n            code: 200,\r\n            data: {},\r\n            message: 'success'\r\n           }\r\n         */\r\n\r\n        console.log('-----');\r\n        console.log(response);\r\n\r\n        const res = response.data\r\n\r\n        if (response.status > 199 && response.status < 300) {\r\n            return res\r\n        }\r\n\r\n        // if ([401, 403].includes(response.status)) {\r\n        // if (response.status == 401){\r\n        // console.log(\"token失效了\");\r\n        // const refreshToken = window.localStorage.refreshToken\r\n        // getRefresh(refreshToken).then(res=>{\r\n        //     const {token, refreshToken} = res.data.data\r\n        //     console.log(res.data.data);\r\n        //     window.localStorage.setItem('token', token)\r\n        //     window.localStorage.setItem('refreshToken', refreshToken)\r\n        // })\r\n        //     // 退出登录\r\n        // }\r\n\r\n        // 弹窗提示\r\n        console.log(res.code);\r\n        return Promise.reject(new Error(res.message))\r\n\r\n    },\r\n    (error) => {\r\n        console.log(error);\r\n        if (error.response && error.response.status == 401){\r\n            console.log(\"token失效了\");\r\n            const refreshToken = window.localStorage.refreshToken\r\n            // 用refresh_token 刷新token\r\n            getRefresh(refreshToken).then(res=>{\r\n                const {access_token, refresh_token} = res.data\r\n                store.state.user.authorization = access_token\r\n                console.log(res);\r\n                window.localStorage.setItem('authorization', access_token)\r\n                window.localStorage.setItem('refreshToken', refresh_token)\r\n                const config = error.config\r\n                // 重置一下配置\r\n                config.headers.Authorization = \" Bearer \"+store.state.user.authorization\r\n                config.baseURL = '' // url已经带上了/api，避免出现/api/api的情况\r\n                // 重试当前请求并返回promise\r\n                return Promise.reject(service(config).then(res=>{\r\n                    console.log(res.data);\r\n                }))\r\n            }).catch(res=>{\r\n                console.error('refreshtoken error =>', res)\r\n                debugger\r\n                \r\n                //刷新token失败，，跳转到首页重新登录\r\n                window.location.href = '/'\r\n                localStorage.removeItem('login')\r\n                //提醒用户过期\r\n                this.$message({\r\n                    showClose: true,\r\n                    message: '你已长时间没有登陆，请重新登陆',\r\n                    type: 'warning'\r\n                });\r\n\r\n            })\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}