{"ast":null,"code":"import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport store from \"@/store\";\nimport getRefresh from \"@/api/refreshToken\";\nconst service = axios.create({\n  baseURL: process.env.BASE_API,\n  // 请求前置连接\n  timeout: 10 * 1000 // 超时时间\n  // withCredentials: false, // 跨域问题时设置\n});\n\n// 是否正在刷新的标记\nlet isRefreshing = false;\n// 重试队列，每一项将是一个待执行的函数形式\nlet services = [];\nservice.interceptors.request.use(config => {\n  if (store.state.user && store.state.user.authorization) {\n    config.headers.Authorization = \" Bearer \" + store.state.user.authorization;\n  }\n  return config;\n}, error => {\n  // 弹窗提示\n  console.log(error);\n  return Promise.reject(error);\n});\nservice.interceptors.response.use(response => {\n  /**\r\n   * 1、鉴权：401，403: \r\n   *      1、退出登录 \r\n   *      2、重新鉴权：\r\n   *          1、失败退出登录\r\n   *          2、成功再次发起请求\r\n   * 2、错误信息弹窗提示，并返回错误信息\r\n   * 2xx\r\n   * \r\n   * {\r\n      code: 200,\r\n      data: {},\r\n      message: 'success'\r\n     }\r\n   */\n\n  console.log('-----');\n  console.log(response);\n  const res = response.data;\n  if (response.status > 199 && response.status < 300) {\n    return res;\n  }\n\n  // if ([401, 403].includes(response.status)) {\n  // if (response.status == 401){\n  // console.log(\"token失效了\");\n  // const refreshToken = window.localStorage.refreshToken\n  // getRefresh(refreshToken).then(res=>{\n  //     const {token, refreshToken} = res.data.data\n  //     console.log(res.data.data);\n  //     window.localStorage.setItem('token', token)\n  //     window.localStorage.setItem('refreshToken', refreshToken)\n  // })\n  //     // 退出登录\n  // }\n\n  // 弹窗提示\n  console.log(res.code);\n  return Promise.reject(new Error(res.message));\n}, error => {\n  console.log(error);\n  if (error.response && error.response.status == 401) {\n    const config = error.config;\n    if (!isRefreshing) {\n      console.log(\"token失效了\");\n      const refreshToken = window.localStorage.refreshToken;\n      // 用refresh_token 刷新token\n      getRefresh(refreshToken).then(res => {\n        const {\n          access_token,\n          refresh_token\n        } = res.data;\n        store.state.user.authorization = access_token;\n        console.log(res);\n        window.localStorage.setItem('authorization', access_token);\n        window.localStorage.setItem('refreshToken', refresh_token);\n        // 重置一下配置\n        config.headers.Authorization = \" Bearer \" + store.state.user.authorization;\n        config.baseURL = ''; // url已经带上了/api，避免出现/api/api的情况\n        services.forEach(cb => cb(access_token));\n        services = [];\n        // 重试当前请求并返回promise\n        return service(config);\n      }, rej => {\n        console.error('refreshtoken error =>', rej);\n\n        //刷新token失败，，跳转到首页重新登录\n        window.location.href = '/';\n        localStorage.removeItem('authorization');\n        //提醒用户过期\n        _Message({\n          message: '你已经长时间没有登录了，请重新登陆',\n          type: 'warning',\n          center: true,\n          duration: 5000,\n          showClose: true\n        });\n      }).finally(() => {\n        isRefreshing = false;\n      });\n    } else {\n      new Promise(resolve => {\n        services.push(() => {\n          config.headers.Authorization = \" Bearer \" + store.state.user.authorization;\n          resolve(service(config));\n        });\n      });\n    }\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","store","getRefresh","service","create","baseURL","process","env","BASE_API","timeout","isRefreshing","services","interceptors","request","use","config","state","user","authorization","headers","Authorization","error","console","log","Promise","reject","response","res","data","status","code","Error","message","refreshToken","window","localStorage","then","access_token","refresh_token","setItem","forEach","cb","rej","location","href","removeItem","_Message","type","center","duration","showClose","finally","resolve","push"],"sources":["D:/WYKS2python/musicstore/src/utils/requests.js"],"sourcesContent":["import axios from \"axios\";\r\nimport store from \"@/store\";\r\nimport getRefresh from \"@/api/refreshToken\";\r\nimport { Message } from 'element-ui';\r\n\r\nconst service = axios.create({\r\n    baseURL: process.env.BASE_API,    // 请求前置连接\r\n    timeout: 10 * 1000, // 超时时间\r\n    // withCredentials: false, // 跨域问题时设置\r\n})\r\n\r\n// 是否正在刷新的标记\r\nlet isRefreshing = false\r\n// 重试队列，每一项将是一个待执行的函数形式\r\nlet services = []\r\n\r\nservice.interceptors.request.use(\r\n    (config) => {\r\n        if (store.state.user && store.state.user.authorization) {\r\n            config.headers.Authorization = \" Bearer \"+store.state.user.authorization\r\n        }\r\n        return config\r\n    },\r\n    (error) => {\r\n        // 弹窗提示\r\n        console.log(error);\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nservice.interceptors.response.use(\r\n    (response) => {\r\n        /**\r\n         * 1、鉴权：401，403: \r\n         *      1、退出登录 \r\n         *      2、重新鉴权：\r\n         *          1、失败退出登录\r\n         *          2、成功再次发起请求\r\n         * 2、错误信息弹窗提示，并返回错误信息\r\n         * 2xx\r\n         * \r\n         * {\r\n            code: 200,\r\n            data: {},\r\n            message: 'success'\r\n           }\r\n         */\r\n\r\n        console.log('-----');\r\n        console.log(response);\r\n\r\n        const res = response.data\r\n\r\n        if (response.status > 199 && response.status < 300) {\r\n            return res\r\n        }\r\n\r\n        // if ([401, 403].includes(response.status)) {\r\n        // if (response.status == 401){\r\n        // console.log(\"token失效了\");\r\n        // const refreshToken = window.localStorage.refreshToken\r\n        // getRefresh(refreshToken).then(res=>{\r\n        //     const {token, refreshToken} = res.data.data\r\n        //     console.log(res.data.data);\r\n        //     window.localStorage.setItem('token', token)\r\n        //     window.localStorage.setItem('refreshToken', refreshToken)\r\n        // })\r\n        //     // 退出登录\r\n        // }\r\n\r\n        // 弹窗提示\r\n        console.log(res.code);\r\n        return Promise.reject(new Error(res.message))\r\n\r\n    },\r\n    (error) => {\r\n        console.log(error);\r\n        if (error.response && error.response.status == 401){\r\n            const config = error.config\r\n            if(!isRefreshing){\r\n                console.log(\"token失效了\");\r\n                const refreshToken = window.localStorage.refreshToken\r\n                // 用refresh_token 刷新token\r\n                getRefresh(refreshToken).then(res=>{\r\n                    const {access_token, refresh_token} = res.data\r\n                    store.state.user.authorization = access_token\r\n                    console.log(res);\r\n                    window.localStorage.setItem('authorization', access_token)\r\n                    window.localStorage.setItem('refreshToken', refresh_token)\r\n                    // 重置一下配置\r\n                    config.headers.Authorization = \" Bearer \"+store.state.user.authorization\r\n                    config.baseURL = '' // url已经带上了/api，避免出现/api/api的情况\r\n                    services.forEach(cb => cb(access_token))\r\n                    services = []\r\n                    // 重试当前请求并返回promise\r\n                    return service(config)  \r\n            },rej=>{\r\n                console.error('refreshtoken error =>', rej)\r\n                \r\n                //刷新token失败，，跳转到首页重新登录\r\n                window.location.href = '/'\r\n                localStorage.removeItem('authorization')\r\n                //提醒用户过期\r\n                Message({\r\n                    message:'你已经长时间没有登录了，请重新登陆',   \r\n                    type:'warning',\r\n                    center:true,\r\n                    duration:5000,\r\n                    showClose:true\r\n                }\r\n                )\r\n\r\n            }).finally(()=>{\r\n                isRefreshing = false\r\n            })\r\n            }else{\r\n                new Promise((resolve)=>{\r\n                    services.push(()=>{\r\n                        config.headers.Authorization = \" Bearer \"+store.state.user.authorization\r\n                        resolve(service(config))\r\n                    })\r\n                })\r\n            }\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}