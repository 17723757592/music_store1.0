{"ast":null,"code":"import axios from \"axios\";\nimport store from \"@/store\";\nimport getRefresh from \"@/api/refreshToken\";\nconst service = axios.create({\n  baseURL: process.env.BASE_API,\n  // 请求前置连接\n  timeout: 10 * 1000 // 超时时间\n  // withCredentials: false, // 跨域问题时设置\n});\n\nservice.interceptors.request.use(config => {\n  if (store.state.user && store.state.user.authorization) {\n    config.headers.Authorization = \" Bearer \" + store.state.user.authorization;\n  }\n  return config;\n}, error => {\n  // 弹窗提示\n  console.log(error);\n  return Promise.reject(error);\n});\nservice.interceptors.response.use(response => {\n  /**\r\n   * 1、鉴权：401，403: \r\n   *      1、退出登录 \r\n   *      2、重新鉴权：\r\n   *          1、失败退出登录\r\n   *          2、成功再次发起请求\r\n   * 2、错误信息弹窗提示，并返回错误信息\r\n   * 2xx\r\n   * \r\n   * {\r\n      code: 200,\r\n      data: {},\r\n      message: 'success'\r\n     }\r\n   */\n\n  console.log('-----');\n  console.log(response);\n  const res = response.data;\n  if (response.status > 199 && response.status < 300) {\n    console.log(777);\n    return res;\n  }\n\n  // if ([401, 403].includes(response.status)) {\n  if (response.status == 401) {\n    console.log(\"token失效了\");\n    const refreshToken = window.localStorage.refreshToken;\n    getRefresh(refreshToken).then(res => {\n      const {\n        token,\n        refreshToken\n      } = res.data.data;\n      console.log(res.data.data);\n      window.localStorage.setItem('token', token);\n      window.localStorage.setItem('refreshToken', refreshToken);\n    });\n    // 退出登录\n  }\n\n  // 弹窗提示\n  console.log(res.code);\n  return Promise.reject(new Error(res.message));\n}, error => {\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","store","getRefresh","service","create","baseURL","process","env","BASE_API","timeout","interceptors","request","use","config","state","user","authorization","headers","Authorization","error","console","log","Promise","reject","response","res","data","status","refreshToken","window","localStorage","then","token","setItem","code","Error","message"],"sources":["D:/WYKS2python/musicstore/src/utils/requests.js"],"sourcesContent":["import axios from \"axios\";\r\nimport store from \"@/store\";\r\nimport getRefresh from \"@/api/refreshToken\";\r\n\r\nconst service = axios.create({\r\n    baseURL: process.env.BASE_API,    // 请求前置连接\r\n    timeout: 10 * 1000, // 超时时间\r\n    // withCredentials: false, // 跨域问题时设置\r\n})\r\n\r\nservice.interceptors.request.use(\r\n    (config) => {\r\n        if (store.state.user && store.state.user.authorization) {\r\n            config.headers.Authorization = \" Bearer \"+store.state.user.authorization\r\n        }\r\n        return config\r\n    },\r\n    (error) => {\r\n        // 弹窗提示\r\n        console.log(error);\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nservice.interceptors.response.use(\r\n    (response) => {\r\n        /**\r\n         * 1、鉴权：401，403: \r\n         *      1、退出登录 \r\n         *      2、重新鉴权：\r\n         *          1、失败退出登录\r\n         *          2、成功再次发起请求\r\n         * 2、错误信息弹窗提示，并返回错误信息\r\n         * 2xx\r\n         * \r\n         * {\r\n            code: 200,\r\n            data: {},\r\n            message: 'success'\r\n           }\r\n         */\r\n\r\n        console.log('-----');\r\n        console.log(response);\r\n\r\n        const res = response.data\r\n\r\n        if (response.status > 199 && response.status < 300) {\r\n            console.log(777);\r\n            return res\r\n        }\r\n\r\n        // if ([401, 403].includes(response.status)) {\r\n        if (response.status == 401){\r\n        console.log(\"token失效了\");\r\n        const refreshToken = window.localStorage.refreshToken\r\n        getRefresh(refreshToken).then(res=>{\r\n            const {token, refreshToken} = res.data.data\r\n            console.log(res.data.data);\r\n            window.localStorage.setItem('token', token)\r\n            window.localStorage.setItem('refreshToken', refreshToken)\r\n        })\r\n            // 退出登录\r\n        }\r\n\r\n        // 弹窗提示\r\n        console.log(res.code);\r\n        return Promise.reject(new Error(res.message))\r\n\r\n    },\r\n    (error) => {\r\n\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,UAAU,MAAM,oBAAoB;AAE3C,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAAK;EAClCC,OAAO,EAAE,EAAE,GAAG,IAAI,CAAE;EACpB;AACJ,CAAC,CAAC;;AAEFN,OAAO,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACR,IAAIZ,KAAK,CAACa,KAAK,CAACC,IAAI,IAAId,KAAK,CAACa,KAAK,CAACC,IAAI,CAACC,aAAa,EAAE;IACpDH,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAU,GAACjB,KAAK,CAACa,KAAK,CAACC,IAAI,CAACC,aAAa;EAC5E;EACA,OAAOH,MAAM;AACjB,CAAC,EACAM,KAAK,IAAK;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAGDhB,OAAO,CAACO,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC5BY,QAAQ,IAAK;EACV;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEQJ,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpBD,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;EAErB,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EAEzB,IAAIF,QAAQ,CAACG,MAAM,GAAG,GAAG,IAAIH,QAAQ,CAACG,MAAM,GAAG,GAAG,EAAE;IAChDP,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IAChB,OAAOI,GAAG;EACd;;EAEA;EACA,IAAID,QAAQ,CAACG,MAAM,IAAI,GAAG,EAAC;IAC3BP,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB,MAAMO,YAAY,GAAGC,MAAM,CAACC,YAAY,CAACF,YAAY;IACrD1B,UAAU,CAAC0B,YAAY,CAAC,CAACG,IAAI,CAACN,GAAG,IAAE;MAC/B,MAAM;QAACO,KAAK;QAAEJ;MAAY,CAAC,GAAGH,GAAG,CAACC,IAAI,CAACA,IAAI;MAC3CN,OAAO,CAACC,GAAG,CAACI,GAAG,CAACC,IAAI,CAACA,IAAI,CAAC;MAC1BG,MAAM,CAACC,YAAY,CAACG,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;MAC3CH,MAAM,CAACC,YAAY,CAACG,OAAO,CAAC,cAAc,EAAEL,YAAY,CAAC;IAC7D,CAAC,CAAC;IACE;EACJ;;EAEA;EACAR,OAAO,CAACC,GAAG,CAACI,GAAG,CAACS,IAAI,CAAC;EACrB,OAAOZ,OAAO,CAACC,MAAM,CAAC,IAAIY,KAAK,CAACV,GAAG,CAACW,OAAO,CAAC,CAAC;AAEjD,CAAC,EACAjB,KAAK,IAAK;EAEP,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAehB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}